Q.1
// Command interface
interface Command {
    void execute();
}

// Concrete command classes
class TVOnCommand implements Command {
    private TV tv;

    public TVOnCommand(TV tv) {
        this.tv = tv;
    }

    @Override
    public void execute() {
        tv.turnOn();
    }
}

class TVOffCommand implements Command {
    private TV tv;

    public TVOffCommand(TV tv) {
        this.tv = tv;
    }

    @Override
    public void execute() {
        tv.turnOff();
    }
}

// Receiver class
class TV {
    public void turnOn() {
        System.out.println("TV is ON");
    }

    public void turnOff() {
        System.out.println("TV is OFF");
    }
}

// Invoker class
class RemoteControl {
    private Command command;

    public void setCommand(Command command) {
        this.command = command;
    }

    public void pressButton() {
        command.execute();
    }
}

// Client code
public class RemoteControlTest {
    public static void main(String[] args) {
        // Create the TV and command objects
        TV tv = new TV();
        Command tvOnCommand = new TVOnCommand(tv);
        Command tvOffCommand = new TVOffCommand(tv);

        // Create the remote control
        RemoteControl remoteControl = new RemoteControl();

        // Set and press the ON button
        remoteControl.setCommand(tvOnCommand);
        remoteControl.pressButton();

        // Set and press the OFF button
        remoteControl.setCommand(tvOffCommand);
        remoteControl.pressButton();
    }
}

--------------------------------------------------------
--------------------------------------------------------

Q.2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

# Generate synthetic data
np.random.seed(42)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + 1.5 * X**2 + np.random.randn(100, 1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Polynomial features
degree = 2
poly_features = PolynomialFeatures(degree=degree, include_bias=False)
X_train_poly = poly_features.fit_transform(X_train)

# Train a linear regression model with polynomial features
lin_reg = LinearRegression()
lin_reg.fit(X_train_poly, y_train)

# Make predictions on the training data
X_train_poly_pred = lin_reg.predict(X_train_poly)

# Evaluate the model on training data
mse_train = mean_squared_error(y_train, X_train_poly_pred)
print(f"Mean Squared Error on Training Data: {mse_train}")

# Visualize the results
X_new = np.linspace(0, 2, 100).reshape(-1, 1)
X_new_poly = poly_features.transform(X_new)
y_new = lin_reg.predict(X_new_poly)

plt.scatter(X, y, label='Original Data')
plt.plot(X_new, y_new, 'r-', label=f'Degree {degree} Polynomial Regression')
plt.xlabel('X')
plt.ylabel('y')
plt.legend()
plt.show()

----------------OR---------------------

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values
dataset.head(5)
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
lin_reg = LinearRegression()
lin_reg.fit(X_poly, y)
y_pred = lin_reg.predict(X_poly)
df = pd.DataFrame({'Real Values':y, 'Predicted Values':y_pred}) df
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color = 'red')
plt.scatter(X, y_pred, color = 'green')
plt.plot(X_grid,
lin_reg.predict(poly_reg.fit_transform(X_grid)), color =
'black')
plt.title('Polynomial Regression')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

--------------------------------------------------------------------
--------------------------------------------------------------------

Q.3
var fs = require('fs');
var http = require('http'); 
http.createServer(function (req, res) {
//  Use fs.readFile() method to read the file
fs.readFile('file1.txt', 'utf8', function(err, data){ 
if (err){
res.writeHead(404, {'Content-Type': 'text/html'});
return res.end("404 Not Found");
}
// Display the file content 
if(err) {
return console.error(err);
}
console.log(data);
console.log("readFile called");
});
});

--------------------OR---------------------------------

const http = require('http');
const fs = require('fs');
const path = require('path');

const server = http.createServer((req, res) => {
  // Extract the requested file path from the URL
  const filePath = path.join(__dirname, req.url);

  // Read the file
  fs.readFile(filePath, 'utf8', (err, data) => {
    if (err) {
      if (err.code === 'ENOENT') {
        // File not found (404 error)
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
      } else {
        // Other errors
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('Internal Server Error');
      }
    } else {
      // File found, send the content to the client
      res.writeHead(200, { 'Content-Type': 'text/plain' });
      res.end(data);
    }
  });
});

const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
