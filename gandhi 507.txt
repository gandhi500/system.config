Q.1
// Command interface
interface CeilingFanCommand {
    void execute();
}

// Concrete command classes
class CeilingFanOnCommand implements CeilingFanCommand {
    private CeilingFan ceilingFan;

    public CeilingFanOnCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        ceilingFan.turnOn();
    }
}

class CeilingFanOffCommand implements CeilingFanCommand {
    private CeilingFan ceilingFan;

    public CeilingFanOffCommand(CeilingFan ceilingFan) {
        this.ceilingFan = ceilingFan;
    }

    @Override
    public void execute() {
        ceilingFan.turnOff();
    }
}

// Receiver class
class CeilingFan {
    private boolean isOn;

    public void turnOn() {
        isOn = true;
        System.out.println("Ceiling Fan is ON");
    }

    public void turnOff() {
        isOn = false;
        System.out.println("Ceiling Fan is OFF");
    }

    public boolean isOn() {
        return isOn;
    }
}

// Undo Command interface
interface UndoCommand {
    void undo();
}

// Concrete Undo Command class
class UndoCeilingFanCommand implements UndoCommand {
    private CeilingFanCommand command;

    public UndoCeilingFanCommand(CeilingFanCommand command) {
        this.command = command;
    }

    @Override
    public void undo() {
        // Undo by executing the opposite command
        command.execute();
    }
}

// Invoker class
class RemoteControl {
    private CeilingFanCommand command;
    private UndoCommand undoCommand;

    public void setCommand(CeilingFanCommand command) {
        this.command = command;
        this.undoCommand = new UndoCeilingFanCommand(command);
    }

    public void pressButton() {
        command.execute();
    }

    public void pressUndoButton() {
        undoCommand.undo();
    }
}

// Client code
public class CeilingFanTest {
    public static void main(String[] args) {
        // Create the Ceiling Fan and command objects
        CeilingFan ceilingFan = new CeilingFan();
        CeilingFanCommand fanOnCommand = new CeilingFanOnCommand(ceilingFan);
        CeilingFanCommand fanOffCommand = new CeilingFanOffCommand(ceilingFan);

        // Create the remote control
        RemoteControl remoteControl = new RemoteControl();

        // Test turning the fan on and off
        remoteControl.setCommand(fanOnCommand);
        remoteControl.pressButton();

        remoteControl.setCommand(fanOffCommand);
        remoteControl.pressButton();

        // Undo the last command (turn the fan back on)
        remoteControl.pressUndoButton();
    }
}

------------------------------------------------------------------
------------------------------------------------------------------

Q.2
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn import datasets

# Load the Iris dataset
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a Gaussian Naive Bayes model
model = GaussianNB()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Display classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

--------------------------------OR-----------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
data=pd.read_csv('pima-indians-diabetes.csv')
data.shape
data.isnull().sum()
data.isnull().values.any()
data.dtypes
#visualisation
data.hist()
columns=list(data)[0:-1]
data[columns].hist()
#identifty the correlation
data.corr()
sns.heatmap(data.corr(),annot=True)
sns.pairplot(data)
#calculate diabetes ratio of true or false target varible n_true=len(data.loc[data['class']==True]) n_false=len(data.loc[data['class']==False])
print("No.of true cases:{0} {1}%".format(n_true,(n_true/(n_true+n_false))*100)) print("No.of false cases:{0} {1}%".format(n_false,(n_false/(n_true+n_false))*100)) #split the data
from sklearn.model_selection import train_test_split
x=data.drop('class',axis=1)
y=data['class'] X_train,X_test,Y_train,Y_test=train_test_split(x,y,test_size=0.30,random_state=1) from sklearn.impute import SimpleImputer rep_0=SimpleImputer(missing_values=0,strategy='mean')
cols=X_train.columns
X_train=pd.DataFrame(rep_0.fit_transform(X_train)) X_test=pd.DataFrame(rep_0.fit_transform(X_test)) X_train.columns=cols
X_test.columns=cols
X_train.head()
from sklearn.naive_bayes import GaussianNB
diab_mode=GaussianNB()
diab_mode.fit(X_train,Y_train)
diab_train_predict=diab_mode.predict(X_train)
from sklearn import metrics
print("Model Accuracy:{0}".format(metrics.accuracy_score(Y_train,diab_train_predict))) diab_train_predict=diab_mode.predict(X_test)
from sklearn import metrics
print("Model Accuracy:{0}".format(metrics.accuracy_score(Y_test,diab_train_predict))) cm1=metrics.confusion_matrix(Y_test,diab_train_predict,labels=[1,0]) df_cm1=pd.DataFrame(cm1,index=[i for i in['1','0']],columns=[i for i in['predict 1','predict o']] )
df_cm1

Q.3

const http = require('http');
const fs = require('fs');
const formidable = require('formidable');

const server = http.createServer((req, res) => {
  if (req.url === '/upload' && req.method.toLowerCase() === 'post') {
    // Handle file upload
    const form = new formidable.IncomingForm();

    form.parse(req, (err, fields, files) => {
      if (err) {
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('Internal Server Error');
        return;
      }

      // Move the uploaded file to a specified location
      const oldPath = files.upload.path;
      const newPath = __dirname + '/uploads/' + files.upload.name;

      fs.rename(oldPath, newPath, (err) => {
        if (err) {
          res.writeHead(500, { 'Content-Type': 'text/plain' });
          res.end('Internal Server Error');
        } else {
          res.writeHead(200, { 'Content-Type': 'text/html' });
          res.write('<h1>File uploaded successfully!</h1>');
          res.end();
        }
      });
    });
    return;
  }

  // Serve the HTML form
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.write('<form action="/upload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="upload">');
  res.write('<input type="submit" value="Upload">');
  res.write('</form>');
  res.end();
});

const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}/`);
});
